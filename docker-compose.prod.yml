version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: threatforge
      POSTGRES_USER: threatforge
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-threatforge123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U threatforge -d threatforge"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 64mb --maxmemory-policy allkeys-lru
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

  # FastAPI Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql+asyncpg://threatforge:${POSTGRES_PASSWORD:-threatforge123}@db:5432/threatforge
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - ENVIRONMENT=production
      - DEBUG=false
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - URLSCAN_API_KEY=${URLSCAN_API_KEY}
      - CROWDSTRIKE_CLIENT_ID=${CROWDSTRIKE_CLIENT_ID}
      - CROWDSTRIKE_CLIENT_SECRET=${CROWDSTRIKE_CLIENT_SECRET}
      - FLASHPOINT_API_KEY=${FLASHPOINT_API_KEY}
      - RECORDED_FUTURE_API_KEY=${RECORDED_FUTURE_API_KEY}
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    restart: unless-stopped

  # Celery Worker (Single worker for resource constraints)
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=1
    environment:
      - DATABASE_URL=postgresql+asyncpg://threatforge:${POSTGRES_PASSWORD:-threatforge123}@db:5432/threatforge
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - URLSCAN_API_KEY=${URLSCAN_API_KEY}
      - CROWDSTRIKE_CLIENT_ID=${CROWDSTRIKE_CLIENT_ID}
      - CROWDSTRIKE_CLIENT_SECRET=${CROWDSTRIKE_CLIENT_SECRET}
      - FLASHPOINT_API_KEY=${FLASHPOINT_API_KEY}
      - RECORDED_FUTURE_API_KEY=${RECORDED_FUTURE_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    restart: unless-stopped

  # React Frontend (Nginx static)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "127.0.0.1:3000:80"
    deploy:
      resources:
        limits:
          memory: 32M
        reservations:
          memory: 16M
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
      - frontend
    deploy:
      resources:
        limits:
          memory: 32M
        reservations:
          memory: 16M
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
